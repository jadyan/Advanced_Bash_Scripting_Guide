/*
 * @Author: your name
 * @Date: 2021-03-01 13:55:57
 * @LastEditTime: 2021-03-01 16:59:14
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /jadyan/code/book/CppConcurrency/read/07_Design_of_concurrent_data_structure_based_not_lock/7_8_lock_free_shared_ptr.cpp
 */
//
//  无锁栈一一使用无锁 std::shared_ptr<> 的实现



/*
https://stackoverflow.com/questions/21669757/stdatomic-is-lock-freeshared-ptrt-didnt-compile
Zeta似乎是的。gcc.gnu.org/bugzilla/show_bug.cgi?id=57250直到gcc v4.9.0 –  14年2月10日大宝剑 在6:01才完成shared_ptr的原子测试功能
*/

#include <iostream>
#include <atomic>
#include <memory>
#include <thread>

template <typename T>
class lock_free_stack {
private:
    struct node {
        std::shared_ptr<T> data;
        std::shared_ptr<node> next;
        node(T const& data_) : data(std::make_shared<T>(data_)) {}
    };
    std::shared_ptr<node> head;
public:
    void push(T const& data) {
        std::shared_ptr<node> const  new_node = std::make_shared<node>(data);
        //new_node->next = head.load();
        new_node->next = std::atomic_load(&head);
        while (!std::atomic_compare_exchange_weak(&head, &new_node->next, new_node));
    }
    
    std::shared_ptr<T> pop() {
        std::shared_ptr<node> old_head = std::atomic_load(&head);
        //std::shared_ptr<node> old_head = head.load();
        //while (old_head && !std::atomic_compare_exchange_weak(&head, &old_head, old_head->next));
        while (old_head && !std::atomic_compare_exchange_weak(&head, &old_head, std::atomic_load(&old_head->next)));
        
        return old_head ? old_head->data : std::shared_ptr<T>();
    }
};


void push(lock_free_stack<int>* s)
{
    for (int i = 0; i < 10; ++i) {
        printf("pushing %d\n", i);
        s->push(i);
    }
}


void pop(lock_free_stack<int>* s)
{
    int count = 0;
    std::shared_ptr<int> e;
    while (count < 10) {
        if (e = s->pop()) {
            printf("popping %d\n", *e);
            ++count;
        }
    }
}




int main()
{

    //std::shared_ptr<int> sp = std::make_shared<int>(1);
    //printf("std::atomic_is_lock_free(std::shared_ptr): %d\n", 
    //        std::atomic_is_lock_free(&sp));
    lock_free_stack<int> s;
    std::thread t1(push, &s);

    std::thread t2(pop, &s);
    t1.join();
    t2.join();
    return 0;

}


